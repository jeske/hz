This directory contains some code that might be useful.

bin2c.c
	This program converts files to byte arrays that are automatically
	run with lua_dobuffer.
	This allows C programs to include all necessary Lua code, even in
	precompiled form.
	Even if the code is included in source form, bin2c is useful because it
	avoids the hassle of having to quote special characters in C strings.
	Example of usage: Run bin2c file1 file2 ... > init.h. Then, in your C
	program, just do #include "init.h" anywhere in the *body* of a
	function. This will be equivalent to calling
		lua_dofile("file1"); lua_dofile("file2"); ...

min.c
	The smallest Lua interpreter.

ldbug.c
	An implementation of the old debug API for compatibility.
	In your code, change
		#include "luadebug.h"
	to
		#include "ldbug.h"
	This should be the only change required, but consider adapting your
	code to the new API because it's simpler and more powerful.

lfback.c
	A C implementation of the old fallback system on top of tag methods.
	You only need this module if you have C code that uses lua_setfallback.
	If you just have Lua code that uses setfallback, then see below.

setfallback.lua
	A Lua implementation of fallbacks on top of tag methods.
	You only need this module if you have Lua code that uses setfallback.

trace.c
	A simple execution tracer. An example of how to use the debugging hooks.
