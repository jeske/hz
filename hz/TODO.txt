$Id: TODO.txt,v 1.6 2002/01/21 06:15:05 jeske Exp $
$Date: 2002/01/21 06:15:05 $

============= DONE RECENTLY ============================

5/16/2001  carrying objects now works in a basic way!
5/16/2001  added "dir()" function to lua with better 
           display of global variables, tables, and objects
           for use in the interactive console
5/15/2001  cleaned up the Sprite/SpriteType classes and
           separated (most?) lua code into separate subclass.
           Built an example C++ sprite object.
5/14/2001  make Windowed mode on Win32 with "-w" command line
           option for easier debugging/killing of the game when
           it does bad things. (gdb does not seem to work well
           yet on win32)

============= TODO NOW =====================================

hotlist:
- press the "1" button to build a unit, wait for the unit to
  be built, and then let you pick it up at a mainbase
  (who builds the unit? my mainship? my mainbase? a new
   lua 'game' object which does not exist?)
- allow me to add a horizontal scroll view from lua and 
  somehow connect it to object properties in lua
- make sure C_obj_setPos() is correctly range checked for the
  edge of the map, and that sprites are correctly moved to
  their new tile space! We might want to return a value
  about whether or not the new position is a valid position.
- BASIC AI: make tank unit track nearby units and shoot at them 
  - lua objects need to be able to see neighboring objects and 
    access sprites by tile location.
- collision with trees/rocks
- purchase unit screen
- pixel perfect collision detection


- (see bottom for 'TODO ARTWORK')

============= TODO LATER =====================================

This is the list of stuff which will probably need to be done someday,
but it's really in the critical path right now. If you are looking for
something to knock off which is relatively small, you might try
something in "visual", or something else below which looks simple.

misc:
- the code in map.cpp which handles the viewport following
  the main sprite should really make it so that if
  the ship is going purely left/right/up/down, that it
  floats to the center on that axis. For example, if
  going directly right, currently the Y-screen position
  of the ship stays the same, and it should float to
  the center as the X-screen floats to the left.

  Although this code really should somehow make it into
  script someday.

- propagate mouse/joystick events into lua (keyboard is there)
  - we should really change the way input events are processed.
    First they should go through an input-event-configuration 
    handler which will map literal input events into logical
    input events (i.e. buttons, rel axis, abs axis). Then those
    logical input events should get sent through the chain.

    This should probably happen inside the viewport, before
    sending the input event to the actual game sprites/game 
    objects, because other code (such as the ConsoleView needs 
    access to raw keyboard)

- use sprite "layer" numbers for something useful
- check and update maxsprite size when loading sprites

map improvements:
- tile properties in lua
    movement_rate, terrain_type, fog of war data, etc...
    add tile animation
- real map file data format, and a few real maps!

visual:
- figure out how to get velocity and framerate setup so
  that the scrolling screen does not "jitter".
- Add "x/y offsets" for individual image layers
- pixel-perfect collisions, collision should occur at collide location,
  not at object corner location. This might be done by finally
  making the image loading code platform independent, switching
  from BMP to PNG (or something) and creating the collision bitmask
  at load time in platform independent code.
- fix map/viewport so that it can hit the right and bottom edges of the
  map correctly.
- examine code to make sure image layers draw in the same order 
  all the time

ai thoughts:
- lua ai events: (reached tile location, everytick, enemy_near)
- path computation algorithm
  - how do we do objects which affect terrain movement like bridges?
  - how about generic transporter units?
  - probably just make a unit which can 'link' to another tile, and 
    just compute the A* where that unit is one of the nodes which is
    crossed in the path.

networked play ideas:
- remove dplay stuff, replace with cross platform network calls
- meta-server
- object stuff handled by replicating lua data, do someting like a
  'replicate' table in each object saying what to replicate over the 
  network.
- let clients simulate physics based on old info, and update when
  new info comes over the wire
- let lua control chat interface to user, so it can be extended
   
speedup/safety:
- get a lua_ref for a string imagechunk index, to avoid the
  overhead of comparing strings at runtime. (this will make us
  more Lua dependent)
- debug hooks for 'C stack entries' in a lua stack using __LINE__ etc
  (I don't even remember what this note means ??)
- check and redo viewport math to make sure we can handle a different tile
  size
- offscreen sprite manager 
  - Change IMAGE type and I_doBlit() to keep track of how many times
    each sprite is used between page flips, and then build some
    simple algorithm to incrementally change which ones are stored
    in offscreen memory and which ones are in system memory.
    (i.e. add "this_flip_count" and "this_flip_render_count" to IMAGE,
     when we render, make sure this_flip_count matches the current
     global flip_count and then increment this_flip_render_count.
     All loaded IMAGEs will probably need to be in an ordered linked
     list. During FlipScreen, try and incrementally reorder whoever
     is near the edge of the usage boundary between off-screen cache
     and main memory.)
    Doing this work will also allow us to store enough information
    in the IMAGE structure to make sure we can RestoreSurfaces()
    correctly when someone flips back from another app in windows
    fullscreen mode.

tools:
- image reduction tools
  - smallest box possible
  - smallest 'rectangular diffs' from standard image


============= TODO ARTWORK ============================

Ideas:

Right now artwork for HZ is supplied in 16bit windows BMP format. The
game handles converting to 8bit during load if necessary. We should
move to a non-lossy compressed format (like PNG) eventually. 

Sprites are made up of any number of layers of arbitrary images. The
mainships are currently rendered with 40 directional images. We should
probably use less than this for most other sprites, but probably at
least 12 or 16. Buildings can have cooler animations because they only
have one orientation. Also, any animation which can be added which is
LOCALIZED is great. For example, thrusters out of the back of the
mainship. These should be provided as (separate) small sprites so they
can be animated without having multiple copies of the whole ship. 

Tiles for the 'ground' have to all be the same size for a given
map. We are currently using 32x32 and this seems like a good
size. Ground features can EITHER be made up of special tiles, or
objects. Basic flat-ish ground background should obviously be tiles.
Ground features which are 2.5d, affect unit travel (other than simple
collision), and which will be used often, should be tiles also. Ground
features which are more like objects can be simple sprites. For
example, trees, rocks, logs, fences, small rock outcroppings, are good
candidates for being sprites. Also, if they are sprites, we can do
neat things such as have them take damage, have animations, get run
over, etc. Also, if a ground unit should be able to share the tile
with the object, it should probably be a sprite.

Deliverables/concepts and size estimates:

NOTE: size estimates are based on the ENTIRE image size, including all
2.5d rotations. For example, for moving sprites, the space taken up by
the sprite pixels for a single rotation will be smaller.

  - basic background tiles for ground, water, snow, 
    mountain, roads, etc. 

    Two or three 'area themes' would be good. It 
    would be extra neat to have an area theme
    which had bright and vibrant green, some dusty brown
    and snow. Since we're in 16bit we need to show it off!

  - basic sprites for trees, rocks, bushes, and fences 
    would be cool. Perhaps even some generic building
    rubble. It would be great if rocks had damage/
    explosion animation, and trees had fire/trample
    animations.

  - mainship (est 64x64 or slightly larger)

    This is what you fly around in the whole game. It
    should be able to convert into a ground-based unit
    of some kind. In the original game this was from a 
    plane to a walking robot. It could also be from a 
    plane to a tank, motorcycle, anything really as 
    long as it's visually obvious which mode the unit is
    in.

  - Mainbase (est 200x150)

    The mainbase is the 'target' of your opponent and your
    most prise possession. It has no active defeneses of
    it's own. It should look 'active' in some way. It's the
    only place you can ALWAYS pick units up from (even if
    you control no-minibases). 

  - remote minibase (est 120x90)

    This serves two purposes. The more minibases you own,
    the more money you get. Also, you can pick up units from
    any minibase. Minibases are captured by consecutively
    putting 4 friendly infantry units into them. Whenever
    an infantry unit enters the minibase, the enemy count
    decreases by one, and friendly count increases by one.
    It should have obvious visual indication of how many
    units from each side are occupying the minibase, and
    which team owns the minibase.
 
    Minibases are all pre-built by the map designer.

    The original game had only once "race", so all units
    and minibases were the same. It's unclear how to
    handle minibases with multiple races. Perhaps some
    minibases are of each race, but either team can occupy
    them. Perhaps we will eventually require minibases be
    built/destroyed.

  The largest unit in the game should be your mainship,
  which is slightly larger than 64x64. All units should
  be proportional, and the biggest should be < 64x64.

  - stationary air/ground defense (strong, double gun
       good weapon, turning turret, SAM launcher)
  - heavy tank (strong, good weapon, turning turret)
  - light tank (weak, medium weapon, fixed turret)
  - mobile SAM launcher (weak, anti-air missles)
  - infantry unit (weak, slow, medium weapon)
  - motorcycle (weak, fast, weak weapon)
  - support/suppily vehicle (for refueling other units)
  - anti-air missles (shot by the sam launcher)
  - bullets (shot by everything else)
